{"ast":null,"code":"var _jsxFileName = \"/Users/Richrad/Documents/anzhinewstudents/client/src/App.js\";\nimport React, { Component } from 'react';\nimport Popup from \"reactjs-popup\";\nimport Content from \"./Content.js\";\nimport fetch from \"node-fetch\";\nimport 'whatwg-fetch';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nconst axios = require('axios');\n\nconst options = top100Films.map(option => {\n  const firstLetter = option.title[0].toUpperCase();\n  return {\n    firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\n    ...option\n  };\n});\nconst top100Films = [{\n  title: 'The Shawshank Redemption',\n  year: 1994\n}, {\n  title: 'The Godfather',\n  year: 1972\n}, {\n  title: 'The Godfather: Part II',\n  year: 1974\n}, {\n  title: 'The Dark Knight',\n  year: 2008\n}, {\n  title: '12 Angry Men',\n  year: 1957\n}, {\n  title: \"Schindler's List\",\n  year: 1993\n}, {\n  title: 'Pulp Fiction',\n  year: 1994\n}, {\n  title: 'The Lord of the Rings: The Return of the King',\n  year: 2003\n}, {\n  title: 'The Good, the Bad and the Ugly',\n  year: 1966\n}, {\n  title: 'Fight Club',\n  year: 1999\n}, {\n  title: 'The Lord of the Rings: The Fellowship of the Ring',\n  year: 2001\n}, {\n  title: 'Star Wars: Episode V - The Empire Strikes Back',\n  year: 1980\n}, {\n  title: 'Forrest Gump',\n  year: 1994\n}, {\n  title: 'Inception',\n  year: 2010\n}, {\n  title: 'The Lord of the Rings: The Two Towers',\n  year: 2002\n}, {\n  title: \"One Flew Over the Cuckoo's Nest\",\n  year: 1975\n}, {\n  title: 'Goodfellas',\n  year: 1990\n}, {\n  title: 'The Matrix',\n  year: 1999\n}, {\n  title: 'Seven Samurai',\n  year: 1954\n}, {\n  title: 'Star Wars: Episode IV - A New Hope',\n  year: 1977\n}, {\n  title: 'City of God',\n  year: 2002\n}, {\n  title: 'Se7en',\n  year: 1995\n}, {\n  title: 'The Silence of the Lambs',\n  year: 1991\n}, {\n  title: \"It's a Wonderful Life\",\n  year: 1946\n}, {\n  title: 'Life Is Beautiful',\n  year: 1997\n}, {\n  title: 'The Usual Suspects',\n  year: 1995\n}, {\n  title: 'Léon: The Professional',\n  year: 1994\n}, {\n  title: 'Spirited Away',\n  year: 2001\n}, {\n  title: 'Saving Private Ryan',\n  year: 1998\n}, {\n  title: 'Once Upon a Time in the West',\n  year: 1968\n}, {\n  title: 'American History X',\n  year: 1998\n}, {\n  title: 'Interstellar',\n  year: 2014\n}, {\n  title: 'Casablanca',\n  year: 1942\n}, {\n  title: 'City Lights',\n  year: 1931\n}, {\n  title: 'Psycho',\n  year: 1960\n}, {\n  title: 'The Green Mile',\n  year: 1999\n}, {\n  title: 'The Intouchables',\n  year: 2011\n}, {\n  title: 'Modern Times',\n  year: 1936\n}, {\n  title: 'Raiders of the Lost Ark',\n  year: 1981\n}, {\n  title: 'Rear Window',\n  year: 1954\n}, {\n  title: 'The Pianist',\n  year: 2002\n}, {\n  title: 'The Departed',\n  year: 2006\n}, {\n  title: 'Terminator 2: Judgment Day',\n  year: 1991\n}, {\n  title: 'Back to the Future',\n  year: 1985\n}, {\n  title: 'Whiplash',\n  year: 2014\n}, {\n  title: 'Gladiator',\n  year: 2000\n}, {\n  title: 'Memento',\n  year: 2000\n}, {\n  title: 'The Prestige',\n  year: 2006\n}, {\n  title: 'The Lion King',\n  year: 1994\n}, {\n  title: 'Apocalypse Now',\n  year: 1979\n}, {\n  title: 'Alien',\n  year: 1979\n}, {\n  title: 'Sunset Boulevard',\n  year: 1950\n}, {\n  title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n  year: 1964\n}, {\n  title: 'The Great Dictator',\n  year: 1940\n}, {\n  title: 'Cinema Paradiso',\n  year: 1988\n}, {\n  title: 'The Lives of Others',\n  year: 2006\n}, {\n  title: 'Grave of the Fireflies',\n  year: 1988\n}, {\n  title: 'Paths of Glory',\n  year: 1957\n}, {\n  title: 'Django Unchained',\n  year: 2012\n}, {\n  title: 'The Shining',\n  year: 1980\n}, {\n  title: 'WALL·E',\n  year: 2008\n}, {\n  title: 'American Beauty',\n  year: 1999\n}, {\n  title: 'The Dark Knight Rises',\n  year: 2012\n}, {\n  title: 'Princess Mononoke',\n  year: 1997\n}, {\n  title: 'Aliens',\n  year: 1986\n}, {\n  title: 'Oldboy',\n  year: 2003\n}, {\n  title: 'Once Upon a Time in America',\n  year: 1984\n}, {\n  title: 'Witness for the Prosecution',\n  year: 1957\n}, {\n  title: 'Das Boot',\n  year: 1981\n}, {\n  title: 'Citizen Kane',\n  year: 1941\n}, {\n  title: 'North by Northwest',\n  year: 1959\n}, {\n  title: 'Vertigo',\n  year: 1958\n}, {\n  title: 'Star Wars: Episode VI - Return of the Jedi',\n  year: 1983\n}, {\n  title: 'Reservoir Dogs',\n  year: 1992\n}, {\n  title: 'Braveheart',\n  year: 1995\n}, {\n  title: 'M',\n  year: 1931\n}, {\n  title: 'Requiem for a Dream',\n  year: 2000\n}, {\n  title: 'Amélie',\n  year: 2001\n}, {\n  title: 'A Clockwork Orange',\n  year: 1971\n}, {\n  title: 'Like Stars on Earth',\n  year: 2007\n}, {\n  title: 'Taxi Driver',\n  year: 1976\n}, {\n  title: 'Lawrence of Arabia',\n  year: 1962\n}, {\n  title: 'Double Indemnity',\n  year: 1944\n}, {\n  title: 'Eternal Sunshine of the Spotless Mind',\n  year: 2004\n}, {\n  title: 'Amadeus',\n  year: 1984\n}, {\n  title: 'To Kill a Mockingbird',\n  year: 1962\n}, {\n  title: 'Toy Story 3',\n  year: 2010\n}, {\n  title: 'Logan',\n  year: 2017\n}, {\n  title: 'Full Metal Jacket',\n  year: 1987\n}, {\n  title: 'Dangal',\n  year: 2016\n}, {\n  title: 'The Sting',\n  year: 1973\n}, {\n  title: '2001: A Space Odyssey',\n  year: 1968\n}, {\n  title: \"Singin' in the Rain\",\n  year: 1952\n}, {\n  title: 'Toy Story',\n  year: 1995\n}, {\n  title: 'Bicycle Thieves',\n  year: 1948\n}, {\n  title: 'The Kid',\n  year: 1921\n}, {\n  title: 'Inglourious Basterds',\n  year: 2009\n}, {\n  title: 'Snatch',\n  year: 2000\n}, {\n  title: '3 Idiots',\n  year: 2009\n}, {\n  title: 'Monty Python and the Holy Grail',\n  year: 1975\n}];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchGetData = event => {\n      event.preventDefault();\n      console.log(event.target.majorname.value + \" this is event major name\"); //work\n      //192.168.1.104 as localhost address\n\n      fetch(\"http://192.168.1.104:5000/search/\" + event.target.majorname.value).then(res => res.json()).then(res => {\n        console.log(res + \"_!!!@@!@!@\"); //element can be obatined through res[0].elementname\n        //since res is represented as array there\n\n        console.log(res.length);\n\n        for (var i = 0; i < res.length; i++) {\n          //dont wanna alert jump out too many times :D\n          //show courses\n          alert(res[i].course); // but this can be used for testing ~\n\n          console.log(\"courses are:\" + res[i].course);\n        }\n      }, // Note: it's important to handle errors here\n      error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n    };\n\n    this.axiosPostData = event => {\n      //  event.preventDefault(); is used to prevent frontend real actions\n      //  (in this case :to refresh itself automatically when changes are made)\n      event.preventDefault(); //this.setState({[event.target.name]:event.target.value});\n      //console.log(this.state.searchname);\n\n      axios.post('http://192.168.1.104:5000/test', {\n        studentname: this.state.studentname,\n        phonenumber: this.state.phonenumber\n      }).then(function (response) {\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n      });\n      alert('A name was submitted: ' + this.state.studentname + '  phone number is' + this.state.phonenumber);\n    };\n\n    this.state = {\n      studentname: '',\n      phonenumber: '',\n      searchname: '',\n      majorname: '',\n      uniname: ''\n    };\n    this.handleChange = this.handleChange.bind(this); //this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.axiosPostData = this.axiosPostData.bind(this);\n    this.fetchGetData = this.fetchGetData.bind(this);\n  } //Used to find specific value according to users' input\n  //Somehow ios cant send or retrieve info using fetch/axios\n\n\n  handleChange(event) {\n    //prevent may not needed?\n    //event.preventDefault();\n    //value: event.target.value\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n  /*\n      handleSubmit(event) {\n          event.preventDefault();\n          //alert('A name was submitted: ' + this.state.studentname+ 'age is'+this.state.phonenumber);\n          alert(\"yiha\");\n      }\n  */\n\n\n  render() {\n    let header = '';\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.fetchGetData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"You want to search this major :\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"majorname\",\n      value: this.state.majorname,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"getData\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    })), React.createElement(\"form\", {\n      onSubmit: this.axiosPostData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Enter your student name:\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"studentname\",\n      value: this.state.studentname,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Enter your phone number:\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"phonenumber\",\n      value: this.state.phonenumber,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    })), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Click below to pop up \"), React.createElement(Popup, {\n      modal: true,\n      trigger: React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, \"Click Me\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, close => React.createElement(Content, {\n      close: close,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    })), React.createElement(Autocomplete, {\n      id: \"grouped-demo\",\n      options: options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter)),\n      groupBy: option => option.firstLetter,\n      getOptionLabel: option => option.title,\n      style: {\n        width: 300\n      },\n      renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n        label: \"With categories\",\n        variant: \"outlined\",\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }));\n  }\n  /*\n  handleClick(){\n      window.open(\"/MyScreen\");\n  }\n   */\n\n\n} // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\n\nexport default App;","map":{"version":3,"sources":["/Users/Richrad/Documents/anzhinewstudents/client/src/App.js"],"names":["React","Component","Popup","Content","fetch","TextField","Autocomplete","axios","require","options","top100Films","map","option","firstLetter","title","toUpperCase","test","year","App","constructor","props","fetchGetData","event","preventDefault","console","log","target","majorname","value","then","res","json","length","i","alert","course","error","setState","isLoaded","axiosPostData","post","studentname","state","phonenumber","response","catch","searchname","uniname","handleChange","bind","name","render","header","close","sort","a","b","localeCompare","width","params"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Popup from \"reactjs-popup\";\nimport Content from \"./Content.js\";\nimport fetch from \"node-fetch\";\nimport 'whatwg-fetch';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nconst axios = require('axios');\nconst options = top100Films.map(option => {\n    const firstLetter = option.title[0].toUpperCase();\n    return {\n        firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\n        ...option,\n    };\n});\nconst top100Films = [\n    { title: 'The Shawshank Redemption', year: 1994 },\n    { title: 'The Godfather', year: 1972 },\n    { title: 'The Godfather: Part II', year: 1974 },\n    { title: 'The Dark Knight', year: 2008 },\n    { title: '12 Angry Men', year: 1957 },\n    { title: \"Schindler's List\", year: 1993 },\n    { title: 'Pulp Fiction', year: 1994 },\n    { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\n    { title: 'The Good, the Bad and the Ugly', year: 1966 },\n    { title: 'Fight Club', year: 1999 },\n    { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\n    { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\n    { title: 'Forrest Gump', year: 1994 },\n    { title: 'Inception', year: 2010 },\n    { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\n    { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n    { title: 'Goodfellas', year: 1990 },\n    { title: 'The Matrix', year: 1999 },\n    { title: 'Seven Samurai', year: 1954 },\n    { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\n    { title: 'City of God', year: 2002 },\n    { title: 'Se7en', year: 1995 },\n    { title: 'The Silence of the Lambs', year: 1991 },\n    { title: \"It's a Wonderful Life\", year: 1946 },\n    { title: 'Life Is Beautiful', year: 1997 },\n    { title: 'The Usual Suspects', year: 1995 },\n    { title: 'Léon: The Professional', year: 1994 },\n    { title: 'Spirited Away', year: 2001 },\n    { title: 'Saving Private Ryan', year: 1998 },\n    { title: 'Once Upon a Time in the West', year: 1968 },\n    { title: 'American History X', year: 1998 },\n    { title: 'Interstellar', year: 2014 },\n    { title: 'Casablanca', year: 1942 },\n    { title: 'City Lights', year: 1931 },\n    { title: 'Psycho', year: 1960 },\n    { title: 'The Green Mile', year: 1999 },\n    { title: 'The Intouchables', year: 2011 },\n    { title: 'Modern Times', year: 1936 },\n    { title: 'Raiders of the Lost Ark', year: 1981 },\n    { title: 'Rear Window', year: 1954 },\n    { title: 'The Pianist', year: 2002 },\n    { title: 'The Departed', year: 2006 },\n    { title: 'Terminator 2: Judgment Day', year: 1991 },\n    { title: 'Back to the Future', year: 1985 },\n    { title: 'Whiplash', year: 2014 },\n    { title: 'Gladiator', year: 2000 },\n    { title: 'Memento', year: 2000 },\n    { title: 'The Prestige', year: 2006 },\n    { title: 'The Lion King', year: 1994 },\n    { title: 'Apocalypse Now', year: 1979 },\n    { title: 'Alien', year: 1979 },\n    { title: 'Sunset Boulevard', year: 1950 },\n    { title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb', year: 1964 },\n    { title: 'The Great Dictator', year: 1940 },\n    { title: 'Cinema Paradiso', year: 1988 },\n    { title: 'The Lives of Others', year: 2006 },\n    { title: 'Grave of the Fireflies', year: 1988 },\n    { title: 'Paths of Glory', year: 1957 },\n    { title: 'Django Unchained', year: 2012 },\n    { title: 'The Shining', year: 1980 },\n    { title: 'WALL·E', year: 2008 },\n    { title: 'American Beauty', year: 1999 },\n    { title: 'The Dark Knight Rises', year: 2012 },\n    { title: 'Princess Mononoke', year: 1997 },\n    { title: 'Aliens', year: 1986 },\n    { title: 'Oldboy', year: 2003 },\n    { title: 'Once Upon a Time in America', year: 1984 },\n    { title: 'Witness for the Prosecution', year: 1957 },\n    { title: 'Das Boot', year: 1981 },\n    { title: 'Citizen Kane', year: 1941 },\n    { title: 'North by Northwest', year: 1959 },\n    { title: 'Vertigo', year: 1958 },\n    { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\n    { title: 'Reservoir Dogs', year: 1992 },\n    { title: 'Braveheart', year: 1995 },\n    { title: 'M', year: 1931 },\n    { title: 'Requiem for a Dream', year: 2000 },\n    { title: 'Amélie', year: 2001 },\n    { title: 'A Clockwork Orange', year: 1971 },\n    { title: 'Like Stars on Earth', year: 2007 },\n    { title: 'Taxi Driver', year: 1976 },\n    { title: 'Lawrence of Arabia', year: 1962 },\n    { title: 'Double Indemnity', year: 1944 },\n    { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\n    { title: 'Amadeus', year: 1984 },\n    { title: 'To Kill a Mockingbird', year: 1962 },\n    { title: 'Toy Story 3', year: 2010 },\n    { title: 'Logan', year: 2017 },\n    { title: 'Full Metal Jacket', year: 1987 },\n    { title: 'Dangal', year: 2016 },\n    { title: 'The Sting', year: 1973 },\n    { title: '2001: A Space Odyssey', year: 1968 },\n    { title: \"Singin' in the Rain\", year: 1952 },\n    { title: 'Toy Story', year: 1995 },\n    { title: 'Bicycle Thieves', year: 1948 },\n    { title: 'The Kid', year: 1921 },\n    { title: 'Inglourious Basterds', year: 2009 },\n    { title: 'Snatch', year: 2000 },\n    { title: '3 Idiots', year: 2009 },\n    { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            studentname: '',\n            phonenumber: '',\n            searchname: '',\n            majorname: '',\n            uniname: '',\n        };\n        this.handleChange = this.handleChange.bind(this);\n        //this.handleSubmit = this.handleSubmit.bind(this);\n        this.axiosPostData = this.axiosPostData.bind(this);\n        this.fetchGetData = this.fetchGetData.bind(this);\n\n    }\n\n    //Used to find specific value according to users' input\n    //Somehow ios cant send or retrieve info using fetch/axios\n    fetchGetData = (event) => {\n        event.preventDefault();\n        console.log(event.target.majorname.value+\" this is event major name\");\n        //work\n        //192.168.1.104 as localhost address\n        fetch(\"http://192.168.1.104:5000/search/\" + event.target.majorname.value)\n            .then(res => res.json())\n            .then(\n                (res) => {\n                    console.log(res + \"_!!!@@!@!@\");\n                    //element can be obatined through res[0].elementname\n                    //since res is represented as array there\n                    console.log(res.length);\n                    for (var i = 0; i < res.length; i++) {\n                        //dont wanna alert jump out too many times :D\n                        //show courses\n                        alert(res[i].course);// but this can be used for testing ~\n                        console.log(\"courses are:\" + res[i].course)\n                    }\n                },\n                // Note: it's important to handle errors here\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    };\n\n\n    axiosPostData = (event) => {\n        //  event.preventDefault(); is used to prevent frontend real actions\n        //  (in this case :to refresh itself automatically when changes are made)\n        event.preventDefault();\n        //this.setState({[event.target.name]:event.target.value});\n        //console.log(this.state.searchname);\n        axios.post('http://192.168.1.104:5000/test', {\n            studentname: this.state.studentname,\n            phonenumber: this.state.phonenumber,\n        })\n            .then(function (response) {\n                console.log(response);\n\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n\n        alert('A name was submitted: ' + this.state.studentname + '  phone number is' + this.state.phonenumber);\n\n    }\n\n\n    handleChange(event) {\n        //prevent may not needed?\n        //event.preventDefault();\n        //value: event.target.value\n        this.setState({[event.target.name]: event.target.value});\n\n    }\n\n    /*\n        handleSubmit(event) {\n            event.preventDefault();\n            //alert('A name was submitted: ' + this.state.studentname+ 'age is'+this.state.phonenumber);\n            alert(\"yiha\");\n        }\n    */\n\n    render() {\n        let header = '';\n\n        return (\n\n            <div className=\"App\">\n                <form onSubmit={this.fetchGetData}>\n                    <label>You want to search this major :</label>\n                    <input\n                        type='text'\n                        name='majorname'\n                        value={this.state.majorname}\n                        onChange={this.handleChange}\n                    />\n                    <input type=\"submit\" value=\"getData\"/>\n                </form>\n\n                <form onSubmit={this.axiosPostData}>\n                    <label>Enter your student name:</label>\n                    <input\n                        type='text'\n                        name='studentname'\n                        value={this.state.studentname}\n                        onChange={this.handleChange}\n                    />\n                    <label>Enter your phone number:</label>\n                    <input\n                        type='text'\n                        name='phonenumber'\n                        value={this.state.phonenumber}\n                        onChange={this.handleChange}\n                    />\n                    <input type=\"submit\" value=\"Submit\"/>\n\n                </form>\n                <h1>Click below to pop up </h1>\n                <Popup modal trigger={<button>Click Me</button>}>\n                    {close => <Content close={close}/>}\n                </Popup>\n                <Autocomplete\n                    id=\"grouped-demo\"\n                    options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\n                    groupBy={option => option.firstLetter}\n                    getOptionLabel={option => option.title}\n                    style={{ width: 300 }}\n                    renderInput={params => (<TextField {...params} label=\"With categories\" variant=\"outlined\" fullWidth />)}\n                />\n            </div>\n\n        )\n    }\n\n    /*\n    handleClick(){\n        window.open(\"/MyScreen\");\n    }\n     */\n\n\n}\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nexport default App"]},"metadata":{},"sourceType":"module"}